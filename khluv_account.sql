SHOW USER;

-- 제약조건
-- 중복 제거, 데이터 누락 -> 특정 컬럼에 설정하는 제약
-- 제약조건의 목적
-- 데이터의 무결성
-- 제약조건의 종류
-- 1.NOT NULL : 데이터에 넣을 허용하지 않는 제약 조건
-- 2.UNIQUE : 중복값을 허용하지 않음
-- 3.PRIMARY KEY : 데이터에 NULL을 사용하지 않기
-- --> 컬럼의 고유 식별자
-- 4. FOREIGN KEY : 참조된 다른 테이블 제공하는 값만 사용할 수 있도록 제한하고,
--                  두 테이블 간의 관계를 형성하는 제약 조건.
-- 5. CHECK
-- 6. DEFAULT 

DROP TABLE USER_OTHERCONSTRAINT;
CREATE TABLE USER_OTHERCONSTRAINT (
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30),
    USER_NAME VARCHAR2(20),
    GENDER CHAR(3) CHECK(GENDER IN('M','F')),
    PHONE VARCHAR2(30),
    EMAIL VARCHAR2(50),
    DELETE_YN VARCHAR2(6) DEFAULT 'N'
);
INSERT INTO USER_OTHERCONSTRAINT
VALUES(1, 'user01', 'pass01', '홍길동', 'M', '010-1234-5678', 'hong@iei.or.kr', DEFAULT);
SELECT * FROM USER_OTHERCONSTRAINT;

CREATE TABLE USER_NONE (
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30),
    USER_NAME VARCHAR2(20),
    GENDER CHAR(2),
    PHONE VARCHAR2(30),
    EMAIL VARCHAR2(50)
);
INSERT INTO USER_NONE
VALUES(1, 'user01', 'pass01', '홍길동', 'M', '010-1234-5678', 'hong@iei.or.kr');
SELECT * FROM USER_NONE;

CREATE TABLE USER_NOTNULL (
    USER_NO NUMBER NOT NULL, --> 컬럼 엎에다가 제약조건 주는걸 컬렘레벨로 줬다고 함
    USER_ID VARCHAR2(20) UNIQUE,
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(20) NOT NULL,
    GENDER CHAR(2),
    PHONE VARCHAR2(30),
    EMAIL VARCHAR2(50)
);

INSERT INTO USER_NOTNULL
VALUES(1, NULL, 'pass01', '홍길동', 'M', '010-1234-5678', 'hong@iei.or.kr');

CREATE TABLE USER_PRIMARYKEY (
    USER_NO NUMBER UNIQUE, --> 컬럼 엎에다가 제약조건 주는걸 컬렘레벨로 줬다고 함
    USER_ID VARCHAR2(20) PRIMARY KEY, --> 컬럼레벨
    USER_PWD VARCHAR2(30) NOT NULL, --> NOT NULL은 컬럼레벨만 가능
    USER_NAME VARCHAR2(20) NOT NULL,
    GENDER CHAR(2),
    PHONE VARCHAR2(30),
    EMAIL VARCHAR2(50),
);

CREATE TABLE USER_GRADE(
    GRADE_CODE NUMBER PRIMARY KEY,
    GRADE_NAME VARCHAR2(30) NOT NULL
);

INSERT INTO USER_GRADE
VALUES (10, '일반회원');
INSERT INTO USER_GRADE
VALUES (20, '우수회원');
INSERT INTO USER_GRADE
VALUES (30, '특별회원');
SELECT * FROM USER_GRADE;

CREATE TABLE USER_FOREIGNKEY (
    USER_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) UNIQUE,
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(20),
    GENDER VARCHAR2(2),
    PHONE VARCHAR2(30),
    EMAIL VARCHAR2(50),
    GRADE_CODE NUMBER REFERENCES USER_GRADE(GRADE_CODE) -- 컬럼레벨
    -- GRADE_CODE NUMBER,
    -- FOREIGN KEY(GRADE_CODE) REFERENCES USER_GRADE(GRADE_CODE) -- 테이블레벨
    -- 컬럼레벨이랑 테이블레벨 둘중 하나만 쓰삼
);

INSERT INTO USER_FOREIGNKEY
VALUES(1, 'user01', 'pass01', '홍길동', 'M', '010-1234-5678', 'hong@iei.or.kr', 10);
INSERT INTO USER_FOREIGNKEY
VALUES(2, 'user02', 'pass02', '조한순', 'M', '010-1234-5578', 'han@iei.or.kr', 20);
INSERT INTO USER_FOREIGNKEY
VALUES(3, 'user03', 'pass03', '김박박', 'M', '010-1224-5678', 'parkpark@iei.or.kr', 30);
INSERT INTO USER_FOREIGNKEY
VALUES(4, 'user04', 'pass04', '박바보', 'M', '010-1254-5678', 'boo@iei.or.kr', NULL);
INSERT INTO USER_FOREIGNKEY
VALUES(5, 'user05', 'pass05', '오소리', 'M', '010-1634-5678', '5sound@iei.or.kr', 50);

-- 제약조건 FOREIGN KEY
DROP TABLE SHOP_MEMBER;
CREATE TABLE SHOP_MEMBER (
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(20),
    GENDER VARCHAR2(3),
    PHONE VARCHAR2(30),
    EMAIL VARCHAR2(50),
    UNIQUE(USER_NO),
    PRIMARY KEY(USER_ID)
);

INSERT INTO SHOP_MEMBER
VALUES(1, 'user01', 'pass01', '장홍도', '남', '010-2828-3333', 'hong123@kh.com');
INSERT INTO SHOP_MEMBER
VALUES(2, 'user02', 'pass02', '최성영', '남', '010-2825-3003', 'ggaebi123@kh.com');
INSERT INTO SHOP_MEMBER
VALUES(3, 'user03', 'pass03', '장윤복', '여', '010-2558-3883', 'kim123@kh.com');
INSERT INTO SHOP_MEMBER
VALUES(4, 'user04', 'pass04', '임창민', '남', '010-2118-3773', 'park123@kh.com');
INSERT INTO SHOP_MEMBER
VALUES(5, 'user05', 'pass05', '추민하', '여', '010-2348-3553', 'noh123@kh.com');
SELECT * FROM SHOP_MEMBER;

DROP TABLE SHOP_BUY;
CREATE TABLE SHOP_BUY (
    BUY_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20) REFERENCES SHOP_MEMBER(USER_ID) ON DELETE CASCADE,
    PRODUCT_NAME VARCHAR2(50),                                     
    REG_DATE DATE DEFAULT SYSDATE
);

INSERT INTO SHOP_BUY
VALUES(1, 'user01', '축구화', DEFAULT);
INSERT INTO SHOP_BUY
VALUES(2, 'user02', '농구화', DEFAULT);
INSERT INTO SHOP_BUY
VALUES(3, 'user03', '등산화', DEFAULT);
INSERT INTO SHOP_BUY
VALUES(4, 'user04', '컬링화', DEFAULT);
INSERT INTO SHOP_BUY
VALUES(5, 'user05', '배구화', DEFAULT);
SELECT * FROM SHOP_BUY;

DELETE FROM SHOP_MEMBER WHERE USER_ID = 'user02'; --> 안지워짐
SELECT * FROM SHOP_BUY;

--> 삭제 옵션 
--> 기본 옵션 ON DELETE RESTRICTED : 삭제 불가
--> NULL로 만들기 : ON DELETE SET NULL
--> 연관된 모든 것을 삭제 : ON DELETE CASCADE
